// Generated by `wit-bindgen` 0.31.0. DO NOT EDIT!
// Options used:
pub type Mat = wasm::cv::mat::Mat;
pub type BorderType = wasm::cv::types::BorderType;
pub type Size = wasm::cv::types::Size;
#[allow(unused_unsafe, clippy::all)]
/// GaussianBlur blurs an image using a Gaussian filter.
/// See https://docs.opencv.org/4.x/d4/d86/group__imgproc__filter.html#gae8bdcd9154ed5ca3cbc1766d960f45c1
pub fn gaussian_blur(input: Mat,size: Size,sigma_x: f32,sigma_y: f32,border: BorderType,) -> Mat{
  unsafe {
    let wasm::cv::types::Size{ x:x0, y:y0, } = size;

    #[cfg(target_arch = "wasm32")]
    #[link(wasm_import_module = "$root")]
    extern "C" {
      #[link_name = "gaussian-blur"]
      fn wit_import(_: i32, _: i32, _: i32, _: f32, _: f32, _: i32, ) -> i32;
    }

    #[cfg(not(target_arch = "wasm32"))]
    fn wit_import(_: i32, _: i32, _: i32, _: f32, _: f32, _: i32, ) -> i32{ unreachable!() }
    let ret = wit_import((&input).take_handle() as i32, _rt::as_i32(x0), _rt::as_i32(y0), _rt::as_f32(&sigma_x), _rt::as_f32(&sigma_y), border.clone() as i32);
    wasm::cv::mat::Mat::from_handle(ret as u32)
  }
}
#[allow(dead_code)]
pub mod wasm {
  #[allow(dead_code)]
  pub mod cv {
    #[allow(dead_code, clippy::all)]
    pub mod types {
      #[used]
      #[doc(hidden)]
      static __FORCE_SECTION_REF: fn() =
      super::super::super::__link_custom_section_describing_imports;
      
      #[repr(C)]
      #[derive(Clone, Copy)]
      pub struct Size {
        pub x: i32,
        pub y: i32,
      }
      impl ::core::fmt::Debug for Size {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("Size").field("x", &self.x).field("y", &self.y).finish()
        }
      }
      #[repr(u8)]
      #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
      pub enum BorderType {
        BorderConstant,
        BorderReplicate,
        BorderReflect,
        BorderWrap,
        BorderReflect101,
        BorderTransparent,
        BorderDefault,
        BorderIsolated,
      }
      impl ::core::fmt::Debug for BorderType {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          match self {
            BorderType::BorderConstant => {
              f.debug_tuple("BorderType::BorderConstant").finish()
            }
            BorderType::BorderReplicate => {
              f.debug_tuple("BorderType::BorderReplicate").finish()
            }
            BorderType::BorderReflect => {
              f.debug_tuple("BorderType::BorderReflect").finish()
            }
            BorderType::BorderWrap => {
              f.debug_tuple("BorderType::BorderWrap").finish()
            }
            BorderType::BorderReflect101 => {
              f.debug_tuple("BorderType::BorderReflect101").finish()
            }
            BorderType::BorderTransparent => {
              f.debug_tuple("BorderType::BorderTransparent").finish()
            }
            BorderType::BorderDefault => {
              f.debug_tuple("BorderType::BorderDefault").finish()
            }
            BorderType::BorderIsolated => {
              f.debug_tuple("BorderType::BorderIsolated").finish()
            }
          }
        }
      }

      impl BorderType{
        #[doc(hidden)]
        pub unsafe fn _lift(val: u8) -> BorderType{
          if !cfg!(debug_assertions) {
            return ::core::mem::transmute(val);
          }

          match val {
            0 => BorderType::BorderConstant,
            1 => BorderType::BorderReplicate,
            2 => BorderType::BorderReflect,
            3 => BorderType::BorderWrap,
            4 => BorderType::BorderReflect101,
            5 => BorderType::BorderTransparent,
            6 => BorderType::BorderDefault,
            7 => BorderType::BorderIsolated,

            _ => panic!("invalid enum discriminant"),
          }
        }
      }


    }

    #[allow(dead_code, clippy::all)]
    pub mod mat {
      #[used]
      #[doc(hidden)]
      static __FORCE_SECTION_REF: fn() =
      super::super::super::__link_custom_section_describing_imports;
      
      use super::super::super::_rt;
      #[repr(u8)]
      #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
      pub enum Mattype {
        Cv8u,
        Cv8s,
        Cv16u,
        Cv16s,
        Cv32s,
        Cv32f,
        Cv64f,
      }
      impl ::core::fmt::Debug for Mattype {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          match self {
            Mattype::Cv8u => {
              f.debug_tuple("Mattype::Cv8u").finish()
            }
            Mattype::Cv8s => {
              f.debug_tuple("Mattype::Cv8s").finish()
            }
            Mattype::Cv16u => {
              f.debug_tuple("Mattype::Cv16u").finish()
            }
            Mattype::Cv16s => {
              f.debug_tuple("Mattype::Cv16s").finish()
            }
            Mattype::Cv32s => {
              f.debug_tuple("Mattype::Cv32s").finish()
            }
            Mattype::Cv32f => {
              f.debug_tuple("Mattype::Cv32f").finish()
            }
            Mattype::Cv64f => {
              f.debug_tuple("Mattype::Cv64f").finish()
            }
          }
        }
      }

      impl Mattype{
        #[doc(hidden)]
        pub unsafe fn _lift(val: u8) -> Mattype{
          if !cfg!(debug_assertions) {
            return ::core::mem::transmute(val);
          }

          match val {
            0 => Mattype::Cv8u,
            1 => Mattype::Cv8s,
            2 => Mattype::Cv16u,
            3 => Mattype::Cv16s,
            4 => Mattype::Cv32s,
            5 => Mattype::Cv32f,
            6 => Mattype::Cv64f,

            _ => panic!("invalid enum discriminant"),
          }
        }
      }


      #[derive(Debug)]
      #[repr(transparent)]
      pub struct Mat{
        handle: _rt::Resource<Mat>,
      }

      impl Mat{
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
          Self {
            handle: _rt::Resource::from_handle(handle),
          }
        }

        #[doc(hidden)]
        pub fn take_handle(&self) -> u32 {
          _rt::Resource::take_handle(&self.handle)
        }

        #[doc(hidden)]
        pub fn handle(&self) -> u32 {
          _rt::Resource::handle(&self.handle)
        }
      }


      unsafe impl _rt::WasmResource for Mat{
        #[inline]
        unsafe fn drop(_handle: u32) {
          #[cfg(not(target_arch = "wasm32"))]
          unreachable!();

          #[cfg(target_arch = "wasm32")]
          {
            #[link(wasm_import_module = "wasm:cv/mat")]
            extern "C" {
              #[link_name = "[resource-drop]mat"]
              fn drop(_: u32);
            }

            drop(_handle);
          }
        }
      }

      impl Mat {
        #[allow(unused_unsafe, clippy::all)]
        pub fn new(cols: u32,rows: u32,type_: Mattype,) -> Self{
          unsafe {

            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "wasm:cv/mat")]
            extern "C" {
              #[link_name = "[constructor]mat"]
              fn wit_import(_: i32, _: i32, _: i32, ) -> i32;
            }

            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i32, _: i32, ) -> i32{ unreachable!() }
            let ret = wit_import(_rt::as_i32(&cols), _rt::as_i32(&rows), type_.clone() as i32);
            Mat::from_handle(ret as u32)
          }
        }
      }
      impl Mat {
        #[allow(unused_unsafe, clippy::all)]
        pub fn close(&self,){
          unsafe {

            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "wasm:cv/mat")]
            extern "C" {
              #[link_name = "[method]mat.close"]
              fn wit_import(_: i32, );
            }

            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, ){ unreachable!() }
            wit_import((self).handle() as i32);
          }
        }
      }
      impl Mat {
        #[allow(unused_unsafe, clippy::all)]
        pub fn cols(&self,) -> u32{
          unsafe {

            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "wasm:cv/mat")]
            extern "C" {
              #[link_name = "[method]mat.cols"]
              fn wit_import(_: i32, ) -> i32;
            }

            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, ) -> i32{ unreachable!() }
            let ret = wit_import((self).handle() as i32);
            ret as u32
          }
        }
      }
      impl Mat {
        #[allow(unused_unsafe, clippy::all)]
        pub fn rows(&self,) -> u32{
          unsafe {

            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "wasm:cv/mat")]
            extern "C" {
              #[link_name = "[method]mat.rows"]
              fn wit_import(_: i32, ) -> i32;
            }

            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, ) -> i32{ unreachable!() }
            let ret = wit_import((self).handle() as i32);
            ret as u32
          }
        }
      }
      impl Mat {
        #[allow(unused_unsafe, clippy::all)]
        pub fn type_(&self,) -> Mattype{
          unsafe {

            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "wasm:cv/mat")]
            extern "C" {
              #[link_name = "[method]mat.type"]
              fn wit_import(_: i32, ) -> i32;
            }

            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, ) -> i32{ unreachable!() }
            let ret = wit_import((self).handle() as i32);
            Mattype::_lift(ret as u8)
          }
        }
      }
      impl Mat {
        #[allow(unused_unsafe, clippy::all)]
        pub fn size(&self,) -> u32{
          unsafe {

            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "wasm:cv/mat")]
            extern "C" {
              #[link_name = "[method]mat.size"]
              fn wit_import(_: i32, ) -> i32;
            }

            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, ) -> i32{ unreachable!() }
            let ret = wit_import((self).handle() as i32);
            ret as u32
          }
        }
      }

    }

  }
}
#[allow(dead_code)]
pub mod exports {
  #[allow(dead_code)]
  pub mod wasm {
    #[allow(dead_code)]
    pub mod cv {
      #[allow(dead_code, clippy::all)]
      pub mod request {
        #[used]
        #[doc(hidden)]
        static __FORCE_SECTION_REF: fn() =
        super::super::super::super::__link_custom_section_describing_imports;
        
        use super::super::super::super::_rt;
        pub type Mat = super::super::super::super::wasm::cv::mat::Mat;
        #[doc(hidden)]
        #[allow(non_snake_case)]
        pub unsafe fn _export_process_cabi<T: Guest>(arg0: i32,) -> i32 {#[cfg(target_arch="wasm32")]
        _rt::run_ctors_once();let result0 = T::process(super::super::super::super::wasm::cv::mat::Mat::from_handle(arg0 as u32));
        (result0).take_handle() as i32
      }
      pub trait Guest {
        fn process(image: Mat,) -> Mat;
      }
      #[doc(hidden)]

      macro_rules! __export_wasm_cv_request_cabi{
        ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

          #[export_name = "wasm:cv/request#process"]
          unsafe extern "C" fn export_process(arg0: i32,) -> i32 {
            $($path_to_types)*::_export_process_cabi::<$ty>(arg0)
          }
        };);
      }
      #[doc(hidden)]
      pub(crate) use __export_wasm_cv_request_cabi;

    }

  }
}
}
mod _rt {


  use core::fmt;
  use core::marker;
  use core::sync::atomic::{AtomicU32, Ordering::Relaxed};

  /// A type which represents a component model resource, either imported or
  /// exported into this component.
  ///
  /// This is a low-level wrapper which handles the lifetime of the resource
  /// (namely this has a destructor). The `T` provided defines the component model
  /// intrinsics that this wrapper uses.
  ///
  /// One of the chief purposes of this type is to provide `Deref` implementations
  /// to access the underlying data when it is owned.
  ///
  /// This type is primarily used in generated code for exported and imported
  /// resources.
  #[repr(transparent)]
  pub struct Resource<T: WasmResource> {
    // NB: This would ideally be `u32` but it is not. The fact that this has
    // interior mutability is not exposed in the API of this type except for the
    // `take_handle` method which is supposed to in theory be private.
    //
    // This represents, almost all the time, a valid handle value. When it's
    // invalid it's stored as `u32::MAX`.
    handle: AtomicU32,
    _marker: marker::PhantomData<T>,
  }

  /// A trait which all wasm resources implement, namely providing the ability to
  /// drop a resource.
  ///
  /// This generally is implemented by generated code, not user-facing code.
  #[allow(clippy::missing_safety_doc)]
  pub unsafe trait WasmResource {
    /// Invokes the `[resource-drop]...` intrinsic.
    unsafe fn drop(handle: u32);
  }

  impl<T: WasmResource> Resource<T> {
    #[doc(hidden)]
    pub unsafe fn from_handle(handle: u32) -> Self {
      debug_assert!(handle != u32::MAX);
      Self {
        handle: AtomicU32::new(handle),
        _marker: marker::PhantomData,
      }
    }

    /// Takes ownership of the handle owned by `resource`.
    ///
    /// Note that this ideally would be `into_handle` taking `Resource<T>` by
    /// ownership. The code generator does not enable that in all situations,
    /// unfortunately, so this is provided instead.
    ///
    /// Also note that `take_handle` is in theory only ever called on values
    /// owned by a generated function. For example a generated function might
    /// take `Resource<T>` as an argument but then call `take_handle` on a
    /// reference to that argument. In that sense the dynamic nature of
    /// `take_handle` should only be exposed internally to generated code, not
    /// to user code.
    #[doc(hidden)]
    pub fn take_handle(resource: &Resource<T>) -> u32 {
      resource.handle.swap(u32::MAX, Relaxed)
    }

    #[doc(hidden)]
    pub fn handle(resource: &Resource<T>) -> u32 {
      resource.handle.load(Relaxed)
    }
  }

  impl<T: WasmResource> fmt::Debug for Resource<T> {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      f.debug_struct("Resource")
      .field("handle", &self.handle)
      .finish()
    }
  }

  impl<T: WasmResource> Drop for Resource<T> {
    fn drop(&mut self) {
      unsafe {
        match self.handle.load(Relaxed) {
          // If this handle was "taken" then don't do anything in the
          // destructor.
          u32::MAX => {}

          // ... but otherwise do actually destroy it with the imported
          // component model intrinsic as defined through `T`.
          other => T::drop(other),
        }
      }
    }
  }
  
  pub fn as_i32<T: AsI32>(t: T) -> i32 {
    t.as_i32()
  }

  pub trait AsI32 {
    fn as_i32(self) -> i32;
  }

  impl<'a, T: Copy + AsI32> AsI32 for &'a T {
    fn as_i32(self) -> i32 {
      (*self).as_i32()
    }
  }
  
  impl AsI32 for i32 {
    #[inline]
    fn as_i32(self) -> i32 {
      self as i32
    }
  }
  
  impl AsI32 for u32 {
    #[inline]
    fn as_i32(self) -> i32 {
      self as i32
    }
  }
  
  impl AsI32 for i16 {
    #[inline]
    fn as_i32(self) -> i32 {
      self as i32
    }
  }
  
  impl AsI32 for u16 {
    #[inline]
    fn as_i32(self) -> i32 {
      self as i32
    }
  }
  
  impl AsI32 for i8 {
    #[inline]
    fn as_i32(self) -> i32 {
      self as i32
    }
  }
  
  impl AsI32 for u8 {
    #[inline]
    fn as_i32(self) -> i32 {
      self as i32
    }
  }
  
  impl AsI32 for char {
    #[inline]
    fn as_i32(self) -> i32 {
      self as i32
    }
  }
  
  impl AsI32 for usize {
    #[inline]
    fn as_i32(self) -> i32 {
      self as i32
    }
  }
  
  pub fn as_f32<T: AsF32>(t: T) -> f32 {
    t.as_f32()
  }

  pub trait AsF32 {
    fn as_f32(self) -> f32;
  }

  impl<'a, T: Copy + AsF32> AsF32 for &'a T {
    fn as_f32(self) -> f32 {
      (*self).as_f32()
    }
  }
  
  impl AsF32 for f32 {
    #[inline]
    fn as_f32(self) -> f32 {
      self as f32
    }
  }
  
  #[cfg(target_arch = "wasm32")]
  pub fn run_ctors_once() {
    wit_bindgen::rt::run_ctors_once();
  }
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_cv_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::exports::wasm::cv::request::__export_wasm_cv_request_cabi!($ty with_types_in $($path_to_types_root)*::exports::wasm::cv::request);
  )
}
#[doc(inline)]
pub(crate) use __export_cv_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.31.0:wasm:cv:cv:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 800] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xa7\x05\x01A\x02\x01\
A\x0f\x01B\x04\x01r\x02\x01xz\x01yz\x04\0\x04size\x03\0\0\x01m\x08\x0fborder-con\
stant\x10border-replicate\x0eborder-reflect\x0bborder-wrap\x11border-reflect101\x12\
border-transparent\x0eborder-default\x0fborder-isolated\x04\0\x0bborder-type\x03\
\0\x02\x03\x01\x0dwasm:cv/types\x05\0\x01B\x0f\x01m\x07\x04cv8u\x04cv8s\x05cv16u\
\x05cv16s\x05cv32s\x05cv32f\x05cv64f\x04\0\x07mattype\x03\0\0\x04\0\x03mat\x03\x01\
\x01i\x02\x01@\x03\x04colsy\x04rowsy\x04type\x01\0\x03\x04\0\x10[constructor]mat\
\x01\x04\x01h\x02\x01@\x01\x04self\x05\x01\0\x04\0\x11[method]mat.close\x01\x06\x01\
@\x01\x04self\x05\0y\x04\0\x10[method]mat.cols\x01\x07\x04\0\x10[method]mat.rows\
\x01\x07\x01@\x01\x04self\x05\0\x01\x04\0\x10[method]mat.type\x01\x08\x04\0\x10[\
method]mat.size\x01\x07\x03\x01\x0bwasm:cv/mat\x05\x01\x02\x03\0\x01\x03mat\x03\0\
\x03mat\x03\0\x02\x02\x03\0\0\x0bborder-type\x03\0\x0bborder-type\x03\0\x04\x02\x03\
\0\0\x04size\x03\0\x04size\x03\0\x06\x01i\x03\x01@\x05\x05input\x08\x04size\x07\x07\
sigma-xv\x07sigma-yv\x06border\x05\0\x08\x03\0\x0dgaussian-blur\x01\x09\x01B\x05\
\x02\x03\x02\x01\x02\x04\0\x03mat\x03\0\0\x01i\x01\x01@\x01\x05image\x02\0\x02\x04\
\0\x07process\x01\x03\x04\x01\x0fwasm:cv/request\x05\x0a\x04\x01\x0awasm:cv/cv\x04\
\0\x0b\x08\x01\0\x02cv\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-co\
mponent\x070.216.0\x10wit-bindgen-rust\x060.31.0";

#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
  wit_bindgen::rt::maybe_link_cabi_realloc();
}

